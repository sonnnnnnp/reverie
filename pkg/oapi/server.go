// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Authorization defines model for Authorization.
type Authorization struct {
	AccessToken  string `json:"access_token"`
	IsNew        bool   `json:"is_new"`
	RefreshToken string `json:"refresh_token"`
	UserId       string `json:"user_id"`
}

// Post defines model for Post.
type Post struct {
	Author         User      `json:"author"`
	CreatedAt      time.Time `json:"created_at"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favorites_count"`

	// Id ID番号
	Id        openapi_types.UUID `json:"id"`
	Text      *string            `json:"text"`
	UpdatedAt time.Time          `json:"updated_at"`
}

// Response defines model for Response.
type Response struct {
	// Code レスポンスコード
	Code int `json:"code"`

	// Data データ
	Data map[string]interface{} `json:"data"`

	// Ok 正常に処理を終了したかどうか
	Ok bool `json:"ok"`
}

// SocialContext defines model for SocialContext.
type SocialContext struct {
	FollowedBy bool `json:"followed_by"`
	Following  bool `json:"following"`
}

// Timeline defines model for Timeline.
type Timeline struct {
	// NextCursor 次のページを取得するためのキー
	NextCursor openapi_types.UUID `json:"next_cursor"`
	Posts      []Post             `json:"posts"`
}

// User defines model for User.
type User struct {
	AvatarImageUrl *string   `json:"avatar_image_url"`
	BannerImageUrl *string   `json:"banner_image_url"`
	Biography      *string   `json:"biography"`
	CreatedAt      time.Time `json:"created_at"`

	// Id ID番号
	Id openapi_types.UUID `json:"id"`

	// Name 名前
	Name          string         `json:"name"`
	Nickname      string         `json:"nickname"`
	SocialContext *SocialContext `json:"social_context,omitempty"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// AuthorizeWithLineParams defines parameters for AuthorizeWithLine.
type AuthorizeWithLineParams struct {
	Code string `form:"code" json:"code"`
}

// RefreshAuthorizationJSONBody defines parameters for RefreshAuthorization.
type RefreshAuthorizationJSONBody struct {
	RefreshToken string `json:"refresh_token"`
}

// CreatePostJSONBody defines parameters for CreatePost.
type CreatePostJSONBody struct {
	Content *string `json:"content,omitempty"`
}

// GetTimelineParams defines parameters for GetTimeline.
type GetTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor    *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit     *int                `form:"limit,omitempty" json:"limit,omitempty"`
	UserId    *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`
	Following *bool               `form:"following,omitempty" json:"following,omitempty"`
}

// GetUserByNameParams defines parameters for GetUserByName.
type GetUserByNameParams struct {
	Name string `form:"name" json:"name"`
}

// GetUserFollowersParams defines parameters for GetUserFollowers.
type GetUserFollowersParams struct {
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// RemoveUserFromFollowersJSONBody defines parameters for RemoveUserFromFollowers.
type RemoveUserFromFollowersJSONBody struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// GetUserFollowingParams defines parameters for GetUserFollowing.
type GetUserFollowingParams struct {
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// FollowUserJSONBody defines parameters for FollowUser.
type FollowUserJSONBody struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// UnfollowUserJSONBody defines parameters for UnfollowUser.
type UnfollowUserJSONBody struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	AvatarImageUrl *string    `json:"avatar_image_url,omitempty"`
	BannerImageUrl *string    `json:"banner_image_url,omitempty"`
	Biography      *string    `json:"biography,omitempty"`
	Birthdate      *time.Time `json:"birthdate,omitempty"`
	Name           *string    `json:"name,omitempty"`
	Nickname       *string    `json:"nickname,omitempty"`
}

// RefreshAuthorizationJSONRequestBody defines body for RefreshAuthorization for application/json ContentType.
type RefreshAuthorizationJSONRequestBody RefreshAuthorizationJSONBody

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody CreatePostJSONBody

// RemoveUserFromFollowersJSONRequestBody defines body for RemoveUserFromFollowers for application/json ContentType.
type RemoveUserFromFollowersJSONRequestBody RemoveUserFromFollowersJSONBody

// FollowUserJSONRequestBody defines body for FollowUser for application/json ContentType.
type FollowUserJSONRequestBody FollowUserJSONBody

// UnfollowUserJSONRequestBody defines body for UnfollowUser for application/json ContentType.
type UnfollowUserJSONRequestBody UnfollowUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthorizeWithLine request
	AuthorizeWithLine(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAuthorizationWithBody request with any body
	RefreshAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshAuthorization(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostWithBody request with any body
	CreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePost(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FavoritePost request
	FavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnfavoritePost request
	UnfavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeline request
	GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByName request
	GetUserByName(ctx context.Context, params *GetUserByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFollowers request
	GetUserFollowers(ctx context.Context, params *GetUserFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromFollowersWithBody request with any body
	RemoveUserFromFollowersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveUserFromFollowers(ctx context.Context, body RemoveUserFromFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFollowing request
	GetUserFollowing(ctx context.Context, params *GetUserFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FollowUserWithBody request with any body
	FollowUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FollowUser(ctx context.Context, body FollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnfollowUserWithBody request with any body
	UnfollowUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnfollowUser(ctx context.Context, body UnfollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelf request
	GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthorizeWithLine(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeWithLineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAuthorizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAuthorization(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAuthorizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePost(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFavoritePostRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfavoritePostRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByName(ctx context.Context, params *GetUserByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFollowers(ctx context.Context, params *GetUserFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFollowersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromFollowersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromFollowersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromFollowers(ctx context.Context, body RemoveUserFromFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromFollowersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFollowing(ctx context.Context, params *GetUserFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFollowingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUser(ctx context.Context, body FollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfollowUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfollowUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfollowUser(ctx context.Context, body UnfollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfollowUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthorizeWithLineRequest generates requests for AuthorizeWithLine
func NewAuthorizeWithLineRequest(server string, params *AuthorizeWithLineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/line")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAuthorizationRequest calls the generic RefreshAuthorization builder with application/json body
func NewRefreshAuthorizationRequest(server string, body RefreshAuthorizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshAuthorizationRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshAuthorizationRequestWithBody generates requests for RefreshAuthorization with any type of body
func NewRefreshAuthorizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePostRequest calls the generic CreatePost builder with application/json body
func NewCreatePostRequest(server string, body CreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePostRequestWithBody generates requests for CreatePost with any type of body
func NewCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFavoritePostRequest generates requests for FavoritePost
func NewFavoritePostRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/favorites/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnfavoritePostRequest generates requests for UnfavoritePost
func NewUnfavoritePostRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/favorites/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimelineRequest generates requests for GetTimeline
func NewGetTimelineRequest(server string, params *GetTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Following != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "following", runtime.ParamLocationQuery, *params.Following); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByNameRequest generates requests for GetUserByName
func NewGetUserByNameRequest(server string, params *GetUserByNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserFollowersRequest generates requests for GetUserFollowers
func NewGetUserFollowersRequest(server string, params *GetUserFollowersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/followers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromFollowersRequest calls the generic RemoveUserFromFollowers builder with application/json body
func NewRemoveUserFromFollowersRequest(server string, body RemoveUserFromFollowersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveUserFromFollowersRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveUserFromFollowersRequestWithBody generates requests for RemoveUserFromFollowers with any type of body
func NewRemoveUserFromFollowersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/followers/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserFollowingRequest generates requests for GetUserFollowing
func NewGetUserFollowingRequest(server string, params *GetUserFollowingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/following")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFollowUserRequest calls the generic FollowUser builder with application/json body
func NewFollowUserRequest(server string, body FollowUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFollowUserRequestWithBody(server, "application/json", bodyReader)
}

// NewFollowUserRequestWithBody generates requests for FollowUser with any type of body
func NewFollowUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/following/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnfollowUserRequest calls the generic UnfollowUser builder with application/json body
func NewUnfollowUserRequest(server string, body UnfollowUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnfollowUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUnfollowUserRequestWithBody generates requests for UnfollowUser with any type of body
func NewUnfollowUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/following/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSelfRequest generates requests for GetSelf
func NewGetSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthorizeWithLineWithResponse request
	AuthorizeWithLineWithResponse(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*AuthorizeWithLineResponse, error)

	// RefreshAuthorizationWithBodyWithResponse request with any body
	RefreshAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error)

	RefreshAuthorizationWithResponse(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error)

	// CreatePostWithBodyWithResponse request with any body
	CreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostResponse, error)

	CreatePostWithResponse(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostResponse, error)

	// FavoritePostWithResponse request
	FavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FavoritePostResponse, error)

	// UnfavoritePostWithResponse request
	UnfavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfavoritePostResponse, error)

	// GetTimelineWithResponse request
	GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error)

	// GetUserByNameWithResponse request
	GetUserByNameWithResponse(ctx context.Context, params *GetUserByNameParams, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error)

	// GetUserFollowersWithResponse request
	GetUserFollowersWithResponse(ctx context.Context, params *GetUserFollowersParams, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error)

	// RemoveUserFromFollowersWithBodyWithResponse request with any body
	RemoveUserFromFollowersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error)

	RemoveUserFromFollowersWithResponse(ctx context.Context, body RemoveUserFromFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error)

	// GetUserFollowingWithResponse request
	GetUserFollowingWithResponse(ctx context.Context, params *GetUserFollowingParams, reqEditors ...RequestEditorFn) (*GetUserFollowingResponse, error)

	// FollowUserWithBodyWithResponse request with any body
	FollowUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FollowUserResponse, error)

	FollowUserWithResponse(ctx context.Context, body FollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*FollowUserResponse, error)

	// UnfollowUserWithBodyWithResponse request with any body
	UnfollowUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error)

	UnfollowUserWithResponse(ctx context.Context, body UnfollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error)

	// GetSelfWithResponse request
	GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)
}

type AuthorizeWithLineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data Authorization `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthorizeWithLineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeWithLineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data Authorization `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r RefreshAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data Post `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FavoritePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r FavoritePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FavoritePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfavoritePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r UnfavoritePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfavoritePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int      `json:"code"`
		Data Timeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int   `json:"code"`
		Data Users `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data SocialContext `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFollowingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int   `json:"code"`
		Data Users `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data SocialContext `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r FollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data SocialContext `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r UnfollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthorizeWithLineWithResponse request returning *AuthorizeWithLineResponse
func (c *ClientWithResponses) AuthorizeWithLineWithResponse(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*AuthorizeWithLineResponse, error) {
	rsp, err := c.AuthorizeWithLine(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeWithLineResponse(rsp)
}

// RefreshAuthorizationWithBodyWithResponse request with arbitrary body returning *RefreshAuthorizationResponse
func (c *ClientWithResponses) RefreshAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error) {
	rsp, err := c.RefreshAuthorizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAuthorizationResponse(rsp)
}

func (c *ClientWithResponses) RefreshAuthorizationWithResponse(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error) {
	rsp, err := c.RefreshAuthorization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAuthorizationResponse(rsp)
}

// CreatePostWithBodyWithResponse request with arbitrary body returning *CreatePostResponse
func (c *ClientWithResponses) CreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostResponse, error) {
	rsp, err := c.CreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreatePostWithResponse(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostResponse, error) {
	rsp, err := c.CreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostResponse(rsp)
}

// FavoritePostWithResponse request returning *FavoritePostResponse
func (c *ClientWithResponses) FavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FavoritePostResponse, error) {
	rsp, err := c.FavoritePost(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFavoritePostResponse(rsp)
}

// UnfavoritePostWithResponse request returning *UnfavoritePostResponse
func (c *ClientWithResponses) UnfavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfavoritePostResponse, error) {
	rsp, err := c.UnfavoritePost(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfavoritePostResponse(rsp)
}

// GetTimelineWithResponse request returning *GetTimelineResponse
func (c *ClientWithResponses) GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error) {
	rsp, err := c.GetTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelineResponse(rsp)
}

// GetUserByNameWithResponse request returning *GetUserByNameResponse
func (c *ClientWithResponses) GetUserByNameWithResponse(ctx context.Context, params *GetUserByNameParams, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error) {
	rsp, err := c.GetUserByName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByNameResponse(rsp)
}

// GetUserFollowersWithResponse request returning *GetUserFollowersResponse
func (c *ClientWithResponses) GetUserFollowersWithResponse(ctx context.Context, params *GetUserFollowersParams, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error) {
	rsp, err := c.GetUserFollowers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFollowersResponse(rsp)
}

// RemoveUserFromFollowersWithBodyWithResponse request with arbitrary body returning *RemoveUserFromFollowersResponse
func (c *ClientWithResponses) RemoveUserFromFollowersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error) {
	rsp, err := c.RemoveUserFromFollowersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromFollowersResponse(rsp)
}

func (c *ClientWithResponses) RemoveUserFromFollowersWithResponse(ctx context.Context, body RemoveUserFromFollowersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error) {
	rsp, err := c.RemoveUserFromFollowers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromFollowersResponse(rsp)
}

// GetUserFollowingWithResponse request returning *GetUserFollowingResponse
func (c *ClientWithResponses) GetUserFollowingWithResponse(ctx context.Context, params *GetUserFollowingParams, reqEditors ...RequestEditorFn) (*GetUserFollowingResponse, error) {
	rsp, err := c.GetUserFollowing(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFollowingResponse(rsp)
}

// FollowUserWithBodyWithResponse request with arbitrary body returning *FollowUserResponse
func (c *ClientWithResponses) FollowUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FollowUserResponse, error) {
	rsp, err := c.FollowUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUserResponse(rsp)
}

func (c *ClientWithResponses) FollowUserWithResponse(ctx context.Context, body FollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*FollowUserResponse, error) {
	rsp, err := c.FollowUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUserResponse(rsp)
}

// UnfollowUserWithBodyWithResponse request with arbitrary body returning *UnfollowUserResponse
func (c *ClientWithResponses) UnfollowUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error) {
	rsp, err := c.UnfollowUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfollowUserResponse(rsp)
}

func (c *ClientWithResponses) UnfollowUserWithResponse(ctx context.Context, body UnfollowUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error) {
	rsp, err := c.UnfollowUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfollowUserResponse(rsp)
}

// GetSelfWithResponse request returning *GetSelfResponse
func (c *ClientWithResponses) GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error) {
	rsp, err := c.GetSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ParseAuthorizeWithLineResponse parses an HTTP response from a AuthorizeWithLineWithResponse call
func ParseAuthorizeWithLineResponse(rsp *http.Response) (*AuthorizeWithLineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeWithLineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data Authorization `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshAuthorizationResponse parses an HTTP response from a RefreshAuthorizationWithResponse call
func ParseRefreshAuthorizationResponse(rsp *http.Response) (*RefreshAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data Authorization `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePostResponse parses an HTTP response from a CreatePostWithResponse call
func ParseCreatePostResponse(rsp *http.Response) (*CreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data Post `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFavoritePostResponse parses an HTTP response from a FavoritePostWithResponse call
func ParseFavoritePostResponse(rsp *http.Response) (*FavoritePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FavoritePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnfavoritePostResponse parses an HTTP response from a UnfavoritePostWithResponse call
func ParseUnfavoritePostResponse(rsp *http.Response) (*UnfavoritePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfavoritePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimelineResponse parses an HTTP response from a GetTimelineWithResponse call
func ParseGetTimelineResponse(rsp *http.Response) (*GetTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int      `json:"code"`
			Data Timeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserByNameResponse parses an HTTP response from a GetUserByNameWithResponse call
func ParseGetUserByNameResponse(rsp *http.Response) (*GetUserByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserFollowersResponse parses an HTTP response from a GetUserFollowersWithResponse call
func ParseGetUserFollowersResponse(rsp *http.Response) (*GetUserFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int   `json:"code"`
			Data Users `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromFollowersResponse parses an HTTP response from a RemoveUserFromFollowersWithResponse call
func ParseRemoveUserFromFollowersResponse(rsp *http.Response) (*RemoveUserFromFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data SocialContext `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserFollowingResponse parses an HTTP response from a GetUserFollowingWithResponse call
func ParseGetUserFollowingResponse(rsp *http.Response) (*GetUserFollowingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int   `json:"code"`
			Data Users `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFollowUserResponse parses an HTTP response from a FollowUserWithResponse call
func ParseFollowUserResponse(rsp *http.Response) (*FollowUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data SocialContext `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnfollowUserResponse parses an HTTP response from a UnfollowUserWithResponse call
func ParseUnfollowUserResponse(rsp *http.Response) (*UnfollowUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data SocialContext `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfResponse parses an HTTP response from a GetSelfWithResponse call
func ParseGetSelfResponse(rsp *http.Response) (*GetSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// LINE でログイン
	// (POST /authorize/line)
	AuthorizeWithLine(ctx echo.Context, params AuthorizeWithLineParams) error
	// 認証トークンを更新
	// (POST /authorize/refresh)
	RefreshAuthorization(ctx echo.Context) error
	// 投稿を作成する
	// (POST /posts/create)
	CreatePost(ctx echo.Context) error
	// 投稿にいいねする
	// (POST /posts/{post_id}/favorites/create)
	FavoritePost(ctx echo.Context, postId openapi_types.UUID) error
	// 投稿のいいねを解除する
	// (POST /posts/{post_id}/favorites/delete)
	UnfavoritePost(ctx echo.Context, postId openapi_types.UUID) error
	// タイムラインを取得する
	// (GET /timeline)
	GetTimeline(ctx echo.Context, params GetTimelineParams) error
	// ユーザーを取得する
	// (GET /users)
	GetUserByName(ctx echo.Context, params GetUserByNameParams) error
	// ユーザーのフォロワーを取得する
	// (GET /users/followers)
	GetUserFollowers(ctx echo.Context, params GetUserFollowersParams) error
	// ユーザーをフォロワーから削除する
	// (POST /users/followers/delete)
	RemoveUserFromFollowers(ctx echo.Context) error
	// ユーザーのフォローを取得する
	// (GET /users/following)
	GetUserFollowing(ctx echo.Context, params GetUserFollowingParams) error
	// ユーザーをフォローする
	// (POST /users/following/create)
	FollowUser(ctx echo.Context) error
	// ユーザーをアンフォローする
	// (POST /users/following/delete)
	UnfollowUser(ctx echo.Context) error
	// 自分を取得する
	// (GET /users/me)
	GetSelf(ctx echo.Context) error
	// ユーザーを更新する
	// (PUT /users/update)
	UpdateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthorizeWithLine converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeWithLine(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeWithLineParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeWithLine(ctx, params)
	return err
}

// RefreshAuthorization converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshAuthorization(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshAuthorization(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// FavoritePost converts echo context to params.
func (w *ServerInterfaceWrapper) FavoritePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FavoritePost(ctx, postId)
	return err
}

// UnfavoritePost converts echo context to params.
func (w *ServerInterfaceWrapper) UnfavoritePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnfavoritePost(ctx, postId)
	return err
}

// GetTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "following" -------------

	err = runtime.BindQueryParameter("form", true, false, "following", ctx.QueryParams(), &params.Following)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter following: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeline(ctx, params)
	return err
}

// GetUserByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserByName(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserByName(ctx, params)
	return err
}

// GetUserFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserFollowersParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserFollowers(ctx, params)
	return err
}

// RemoveUserFromFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveUserFromFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveUserFromFollowers(ctx)
	return err
}

// GetUserFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserFollowing(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserFollowingParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserFollowing(ctx, params)
	return err
}

// FollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) FollowUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FollowUser(ctx)
	return err
}

// UnfollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) UnfollowUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnfollowUser(ctx)
	return err
}

// GetSelf converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelf(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSelf(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorize/line", wrapper.AuthorizeWithLine)
	router.POST(baseURL+"/authorize/refresh", wrapper.RefreshAuthorization)
	router.POST(baseURL+"/posts/create", wrapper.CreatePost)
	router.POST(baseURL+"/posts/:post_id/favorites/create", wrapper.FavoritePost)
	router.POST(baseURL+"/posts/:post_id/favorites/delete", wrapper.UnfavoritePost)
	router.GET(baseURL+"/timeline", wrapper.GetTimeline)
	router.GET(baseURL+"/users", wrapper.GetUserByName)
	router.GET(baseURL+"/users/followers", wrapper.GetUserFollowers)
	router.POST(baseURL+"/users/followers/delete", wrapper.RemoveUserFromFollowers)
	router.GET(baseURL+"/users/following", wrapper.GetUserFollowing)
	router.POST(baseURL+"/users/following/create", wrapper.FollowUser)
	router.POST(baseURL+"/users/following/delete", wrapper.UnfollowUser)
	router.GET(baseURL+"/users/me", wrapper.GetSelf)
	router.PUT(baseURL+"/users/update", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW28TRxT+K9W0jyYO7ZvfCi0VEkIVFPUhiqzJ7nE8ZHdnmZ0NuJEfdl0FQoRAkQDR",
	"i3oBcQ8g0Qut0vJjBif0X1QzY+/FO14bkjaNawmRlefMmTPf+eZcdnYFWdT1qQceD1BtBQVWE1ysHj8M",
	"eZMy8gXmhHryB59RHxgnoIaxZUEQ1DldAjXKWz6gGgo4I94ialcQCeoenM8MLVDqAPbkGIMGg6BZMjsM",
	"gNWJbRhT08+FhIGNanOJYCVv0eAaiT3zlb5CunAWLC4X+5QG3LBDBYB8eo9BA9XQu9UUrGoPqeqZAJjU",
	"YTHAHOw6VpoalLnyCdmYwyFOXECV4iYbeJkywsE2o9QfDuoWDT2eESIeh0W9rsbIhsBixNeuQsc/2rn+",
	"sHv1V1RJDQlDBVLBBg4XlGYvdBy84ACqcRaCQTD07Tfc4ICntJM0qDl1OfB6FhV3n4XL5MRTEPjUC6Do",
	"SIvaUARJdB6L+DfR+VZ0nsuH+LnobInOWrqPDMo25tik4qKcE79EBnvoUnHC9ubt7osXInrUvXh359qq",
	"iDd2fo5f/b4qopsi+k5E6yJ6IKJVEa2nGhNCDMBJlyRwcms980ygnKYWwc5R6vXdnEemQR2Hnge7vtAa",
	"QkElIL1pGB4wKJWt5BSb7PqMuOAQz+AsDy7wuhWyQB+9Afwe/yCiJ6LzlYL9hYg3uldvdP+8KaJbIl6X",
	"EMaRFIg3RWdrHPb7NNCBj3Bwg1FnXcWJdqIGM4ZbBRi0ykpuIyYIVOAoBp1lzDGrExcvQj1kzlhHcwF7",
	"HrzxJEIXGfabrbGk3ya87TY0edg1nNvutSvdtStGeWIt9ecUBgN1EupWehTKPJ0/N3sW/ZR1GUMrRX8b",
	"vJn11fDAOYxjQZFkYf/nsVjfz3ClrNcqizZI5MEKGeGt01KfNmABMNPsV4uoqKJ/ShQ0OfdRW84nXoMq",
	"lxLuKIC94BD2fVRBy8ACTYrDM7Mzsyrq+uBhn6Aa+mBmduYwqiAf86ZatIp7FQ1Uk9DTS/wSHFXnHLdR",
	"Lal84HPCmyekqNTCsAtc4Ta3gohc9FwIrNX3aq0fi1NU9FHSMJoKmXkprJOWMvD92VmdrjwOOt1j33eI",
	"pSyrng10GZbq+8eyXBkb8mXhfyPPySl5A3LEQ7W5+QoKQtfFrIVq6MTxkx+/I6J7orMp4mciviM6z9WE",
	"DEN61eNwkpzSAnk4tOUQ8CPUbu3Cl6Pq4wGI8uImfNpTqv1bVEuj29x8O8e71w+vvL6/JTqXVPXyVMG0",
	"sf31T9s3nmn6qdKhqmP6cOYdVeOqFtkrvmWmFZk2GWTq124HnEPbl6/v3H8p4o1Xf3yzfemaLnyz7FmR",
	"f+rEbleTBmoko471JHucMuU6mUXTVNdbozTbjSjvdp39ypyd9IJ7gXX0SERfqn+b48FtgwNlcJ/xGlPA",
	"ywB/kgIeb7y+d/uvW3eyyPNM87gIBoA/AZ40mAV0d9dRGgs/3eS9iS8q5hLSIS7hyFAzJsFu2Mz0Ndiu",
	"jcj28QVD0rB3IKvXhBYHPxOI+KUqXb8XnQe6hh0grz4sSa837KTI9u5I66RuR8doc3qN64S3Of2m96CT",
	"pHNXBbZf1P/D6FHtva4bTZRjieBYXEmj0v6lrX2jTzBp/JF58rqIH8i+ufN0TEaNrIZOgUuXQZGLUTdL",
	"sL3pbTI3SSMTovFmaWL66cJLzckKboPkjNZFvNZduzxQPWb52bvYGB3xdDU0jXj/54g3OtwRb3F0r60k",
	"VXkxjXDTCPe2EW6rjINjvICYsnDKwrdlYfyjRKqUi27py5nT4DTQtCvcv4uIiw+7l1ZL0pm+Y1Ywh6b4",
	"oYb3NHqYvnsY6zuH8u8aDKOMN/ubG+8zhqGfFJR8bzAx1yaT+R5EX7olvG+3/w4AAP//AAw7AAgpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
