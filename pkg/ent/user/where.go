// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sonnnnnnp/sns-app/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// AvatarImageURL applies equality check predicate on the "avatar_image_url" field. It's identical to AvatarImageURLEQ.
func AvatarImageURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarImageURL, v))
}

// BannerImageURL applies equality check predicate on the "banner_image_url" field. It's identical to BannerImageURLEQ.
func BannerImageURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBannerImageURL, v))
}

// Biography applies equality check predicate on the "biography" field. It's identical to BiographyEQ.
func Biography(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBiography, v))
}

// Birthdate applies equality check predicate on the "birthdate" field. It's identical to BirthdateEQ.
func Birthdate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdate, v))
}

// LineID applies equality check predicate on the "line_id" field. It's identical to LineIDEQ.
func LineID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLineID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// AvatarImageURLEQ applies the EQ predicate on the "avatar_image_url" field.
func AvatarImageURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatarImageURL, v))
}

// AvatarImageURLNEQ applies the NEQ predicate on the "avatar_image_url" field.
func AvatarImageURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatarImageURL, v))
}

// AvatarImageURLIn applies the In predicate on the "avatar_image_url" field.
func AvatarImageURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatarImageURL, vs...))
}

// AvatarImageURLNotIn applies the NotIn predicate on the "avatar_image_url" field.
func AvatarImageURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatarImageURL, vs...))
}

// AvatarImageURLGT applies the GT predicate on the "avatar_image_url" field.
func AvatarImageURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatarImageURL, v))
}

// AvatarImageURLGTE applies the GTE predicate on the "avatar_image_url" field.
func AvatarImageURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatarImageURL, v))
}

// AvatarImageURLLT applies the LT predicate on the "avatar_image_url" field.
func AvatarImageURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatarImageURL, v))
}

// AvatarImageURLLTE applies the LTE predicate on the "avatar_image_url" field.
func AvatarImageURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatarImageURL, v))
}

// AvatarImageURLContains applies the Contains predicate on the "avatar_image_url" field.
func AvatarImageURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatarImageURL, v))
}

// AvatarImageURLHasPrefix applies the HasPrefix predicate on the "avatar_image_url" field.
func AvatarImageURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatarImageURL, v))
}

// AvatarImageURLHasSuffix applies the HasSuffix predicate on the "avatar_image_url" field.
func AvatarImageURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatarImageURL, v))
}

// AvatarImageURLIsNil applies the IsNil predicate on the "avatar_image_url" field.
func AvatarImageURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatarImageURL))
}

// AvatarImageURLNotNil applies the NotNil predicate on the "avatar_image_url" field.
func AvatarImageURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatarImageURL))
}

// AvatarImageURLEqualFold applies the EqualFold predicate on the "avatar_image_url" field.
func AvatarImageURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatarImageURL, v))
}

// AvatarImageURLContainsFold applies the ContainsFold predicate on the "avatar_image_url" field.
func AvatarImageURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatarImageURL, v))
}

// BannerImageURLEQ applies the EQ predicate on the "banner_image_url" field.
func BannerImageURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBannerImageURL, v))
}

// BannerImageURLNEQ applies the NEQ predicate on the "banner_image_url" field.
func BannerImageURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBannerImageURL, v))
}

// BannerImageURLIn applies the In predicate on the "banner_image_url" field.
func BannerImageURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBannerImageURL, vs...))
}

// BannerImageURLNotIn applies the NotIn predicate on the "banner_image_url" field.
func BannerImageURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBannerImageURL, vs...))
}

// BannerImageURLGT applies the GT predicate on the "banner_image_url" field.
func BannerImageURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBannerImageURL, v))
}

// BannerImageURLGTE applies the GTE predicate on the "banner_image_url" field.
func BannerImageURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBannerImageURL, v))
}

// BannerImageURLLT applies the LT predicate on the "banner_image_url" field.
func BannerImageURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBannerImageURL, v))
}

// BannerImageURLLTE applies the LTE predicate on the "banner_image_url" field.
func BannerImageURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBannerImageURL, v))
}

// BannerImageURLContains applies the Contains predicate on the "banner_image_url" field.
func BannerImageURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBannerImageURL, v))
}

// BannerImageURLHasPrefix applies the HasPrefix predicate on the "banner_image_url" field.
func BannerImageURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBannerImageURL, v))
}

// BannerImageURLHasSuffix applies the HasSuffix predicate on the "banner_image_url" field.
func BannerImageURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBannerImageURL, v))
}

// BannerImageURLIsNil applies the IsNil predicate on the "banner_image_url" field.
func BannerImageURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBannerImageURL))
}

// BannerImageURLNotNil applies the NotNil predicate on the "banner_image_url" field.
func BannerImageURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBannerImageURL))
}

// BannerImageURLEqualFold applies the EqualFold predicate on the "banner_image_url" field.
func BannerImageURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBannerImageURL, v))
}

// BannerImageURLContainsFold applies the ContainsFold predicate on the "banner_image_url" field.
func BannerImageURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBannerImageURL, v))
}

// BiographyEQ applies the EQ predicate on the "biography" field.
func BiographyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBiography, v))
}

// BiographyNEQ applies the NEQ predicate on the "biography" field.
func BiographyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBiography, v))
}

// BiographyIn applies the In predicate on the "biography" field.
func BiographyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBiography, vs...))
}

// BiographyNotIn applies the NotIn predicate on the "biography" field.
func BiographyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBiography, vs...))
}

// BiographyGT applies the GT predicate on the "biography" field.
func BiographyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBiography, v))
}

// BiographyGTE applies the GTE predicate on the "biography" field.
func BiographyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBiography, v))
}

// BiographyLT applies the LT predicate on the "biography" field.
func BiographyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBiography, v))
}

// BiographyLTE applies the LTE predicate on the "biography" field.
func BiographyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBiography, v))
}

// BiographyContains applies the Contains predicate on the "biography" field.
func BiographyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBiography, v))
}

// BiographyHasPrefix applies the HasPrefix predicate on the "biography" field.
func BiographyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBiography, v))
}

// BiographyHasSuffix applies the HasSuffix predicate on the "biography" field.
func BiographyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBiography, v))
}

// BiographyIsNil applies the IsNil predicate on the "biography" field.
func BiographyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBiography))
}

// BiographyNotNil applies the NotNil predicate on the "biography" field.
func BiographyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBiography))
}

// BiographyEqualFold applies the EqualFold predicate on the "biography" field.
func BiographyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBiography, v))
}

// BiographyContainsFold applies the ContainsFold predicate on the "biography" field.
func BiographyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBiography, v))
}

// BirthdateEQ applies the EQ predicate on the "birthdate" field.
func BirthdateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthdate, v))
}

// BirthdateNEQ applies the NEQ predicate on the "birthdate" field.
func BirthdateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthdate, v))
}

// BirthdateIn applies the In predicate on the "birthdate" field.
func BirthdateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthdate, vs...))
}

// BirthdateNotIn applies the NotIn predicate on the "birthdate" field.
func BirthdateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthdate, vs...))
}

// BirthdateGT applies the GT predicate on the "birthdate" field.
func BirthdateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthdate, v))
}

// BirthdateGTE applies the GTE predicate on the "birthdate" field.
func BirthdateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthdate, v))
}

// BirthdateLT applies the LT predicate on the "birthdate" field.
func BirthdateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthdate, v))
}

// BirthdateLTE applies the LTE predicate on the "birthdate" field.
func BirthdateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthdate, v))
}

// BirthdateIsNil applies the IsNil predicate on the "birthdate" field.
func BirthdateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBirthdate))
}

// BirthdateNotNil applies the NotNil predicate on the "birthdate" field.
func BirthdateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBirthdate))
}

// LineIDEQ applies the EQ predicate on the "line_id" field.
func LineIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLineID, v))
}

// LineIDNEQ applies the NEQ predicate on the "line_id" field.
func LineIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLineID, v))
}

// LineIDIn applies the In predicate on the "line_id" field.
func LineIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLineID, vs...))
}

// LineIDNotIn applies the NotIn predicate on the "line_id" field.
func LineIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLineID, vs...))
}

// LineIDGT applies the GT predicate on the "line_id" field.
func LineIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLineID, v))
}

// LineIDGTE applies the GTE predicate on the "line_id" field.
func LineIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLineID, v))
}

// LineIDLT applies the LT predicate on the "line_id" field.
func LineIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLineID, v))
}

// LineIDLTE applies the LTE predicate on the "line_id" field.
func LineIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLineID, v))
}

// LineIDContains applies the Contains predicate on the "line_id" field.
func LineIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLineID, v))
}

// LineIDHasPrefix applies the HasPrefix predicate on the "line_id" field.
func LineIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLineID, v))
}

// LineIDHasSuffix applies the HasSuffix predicate on the "line_id" field.
func LineIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLineID, v))
}

// LineIDIsNil applies the IsNil predicate on the "line_id" field.
func LineIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLineID))
}

// LineIDNotNil applies the NotNil predicate on the "line_id" field.
func LineIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLineID))
}

// LineIDEqualFold applies the EqualFold predicate on the "line_id" field.
func LineIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLineID, v))
}

// LineIDContainsFold applies the ContainsFold predicate on the "line_id" field.
func LineIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLineID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowers applies the HasEdge predicate on the "followers" edge.
func HasFollowers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FollowersTable, FollowersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowersWith applies the HasEdge predicate on the "followers" edge with a given conditions (other predicates).
func HasFollowersWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowing applies the HasEdge predicate on the "following" edge.
func HasFollowing() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FollowingTable, FollowingPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowingWith applies the HasEdge predicate on the "following" edge with a given conditions (other predicates).
func HasFollowingWith(preds ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFollowingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavorites applies the HasEdge predicate on the "favorites" edge.
func HasFavorites() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavoritesTable, FavoritesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoritesWith applies the HasEdge predicate on the "favorites" edge with a given conditions (other predicates).
func HasFavoritesWith(preds ...predicate.Favorite) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFavoritesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
