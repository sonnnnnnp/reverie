// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_timeline.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getTimeline = `-- name: GetTimeline :many
SELECT
    posts.id, posts.author_id, posts.text, posts.created_at, posts.updated_at,
    users.id, users.name, users.nickname, users.biography, users.avatar_image_url, users.banner_image_url, users.is_private, users.birthdate, users.line_id, users.created_at, users.updated_at,
    (
        SELECT
            COUNT(*)
        FROM
            post_favorites
        WHERE
            post_favorites.post_id = posts.id
    ) AS favorites_count,
    EXISTS (
        SELECT
            1
        FROM
            post_favorites
        WHERE
            post_favorites.post_id = posts.id
            AND (
                post_favorites.user_id = $2::uuid
            )
    ) AS favorited
FROM
    posts
    INNER JOIN
        users
        ON posts.author_id = users.id
    LEFT JOIN
        user_blocks AS ub1
        ON users.id = ub1.blocked_id AND ub1.blocker_id = $2::uuid
    LEFT JOIN
        user_blocks AS ub2
        ON users.id = ub2.blocker_id AND ub2.blocked_id = $2::uuid
WHERE
    (
        $3::timestamptz IS NULL
        OR posts.created_at < $3::timestamptz
    )
    AND ub1.blocked_id IS NULL
    AND ub2.blocker_id IS NULL
ORDER BY
    posts.created_at DESC
LIMIT
    $1
`

type GetTimelineParams struct {
	Limit     int64      `json:"limit"`
	SelfID    uuid.UUID  `json:"self_id"`
	CreatedAt *time.Time `json:"created_at"`
}

type GetTimelineRow struct {
	Post           Post  `json:"post"`
	User           User  `json:"user"`
	FavoritesCount int64 `json:"favorites_count"`
	Favorited      bool  `json:"favorited"`
}

func (q *Queries) GetTimeline(ctx context.Context, arg GetTimelineParams) ([]GetTimelineRow, error) {
	rows, err := q.db.Query(ctx, getTimeline, arg.Limit, arg.SelfID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTimelineRow{}
	for rows.Next() {
		var i GetTimelineRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.AuthorID,
			&i.Post.Text,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.Nickname,
			&i.User.Biography,
			&i.User.AvatarImageUrl,
			&i.User.BannerImageUrl,
			&i.User.IsPrivate,
			&i.User.Birthdate,
			&i.User.LineID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.FavoritesCount,
			&i.Favorited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
