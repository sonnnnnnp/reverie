// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_user_followers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUserFollowers = `-- name: GetUserFollowers :many
SELECT
    users.id, users.name, users.nickname, users.biography, users.avatar_image_url, users.banner_image_url, users.birthdate, users.line_id, users.created_at, users.updated_at,
    user_follows.created_at AS followed_at
FROM users
INNER JOIN user_follows ON users.id = user_follows.follower_id
WHERE user_follows.following_id = $1::uuid
ORDER BY user_follows.created_at DESC
`

type GetUserFollowersRow struct {
	ID             uuid.UUID
	Name           string
	Nickname       string
	Biography      *string
	AvatarImageUrl *string
	BannerImageUrl *string
	Birthdate      pgtype.Timestamptz
	LineID         *string
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	FollowedAt     pgtype.Timestamptz
}

func (q *Queries) GetUserFollowers(ctx context.Context, userID uuid.UUID) ([]GetUserFollowersRow, error) {
	rows, err := q.db.Query(ctx, getUserFollowers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFollowersRow{}
	for rows.Next() {
		var i GetUserFollowersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nickname,
			&i.Biography,
			&i.AvatarImageUrl,
			&i.BannerImageUrl,
			&i.Birthdate,
			&i.LineID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FollowedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
