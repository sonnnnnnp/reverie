// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_posts.sql

package db

import (
	"context"
)

const getPosts = `-- name: GetPosts :many
SELECT
    posts.id, posts.author_id, posts.text, posts.created_at, posts.updated_at,
    users.id, users.name, users.nickname, users.biography, users.avatar_image_url, users.banner_image_url, users.birthdate, users.line_id, users.created_at, users.updated_at
FROM posts
INNER JOIN users ON posts.author_id = users.id
ORDER BY posts.created_at DESC
`

type GetPostsRow struct {
	Post Post
	User User
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.AuthorID,
			&i.Post.Text,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.Nickname,
			&i.User.Biography,
			&i.User.AvatarImageUrl,
			&i.User.BannerImageUrl,
			&i.User.Birthdate,
			&i.User.LineID,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
