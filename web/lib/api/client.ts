/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authorize/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 認証トークンを更新 */
        post: operations["refreshAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorize/line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** LINE でログイン */
        post: operations["authorizeWithLine"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ユーザーを取得する */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** ユーザーを更新する */
        put: operations["updateUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 自分を取得する */
        get: operations["getSelf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 投稿を作成する */
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** タイムラインを取得する */
        get: operations["getTimeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /**
             * Format: uuid
             * @description ID番号
             */
            id: string;
            /** @description 名前 */
            username: string;
            display_name: string;
            avatar_url: string;
            cover_url: string;
            biography: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
        };
        Authorization: {
            user_id: string;
            access_token: string;
            refresh_token: string;
            is_new: boolean;
        };
        Post: {
            /**
             * Format: uuid
             * @description ID番号
             */
            id: string;
            author: components["schemas"]["User"];
            content?: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
        };
        Timeline: {
            posts: components["schemas"]["Post"][];
        };
        SocialSetting: {
            lineId: string | null;
        };
        Response: {
            /** @description 正常に処理を終了したかどうか */
            ok: boolean;
            /** @description レスポンスコード */
            code: number;
            /** @description データ */
            data: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    refreshAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    refresh_token: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        /** @description データ */
                        data: components["schemas"]["Authorization"];
                    };
                };
            };
        };
    };
    authorizeWithLine: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        /** @description データ */
                        data: components["schemas"]["Authorization"];
                    };
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        data: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    username?: string;
                    display_name?: string;
                    avatar_url?: string;
                    cover_url?: string;
                    biography?: string;
                    /** Format: date-time */
                    birthdate?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        data: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    getSelf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        data: components["schemas"]["User"];
                    };
                };
            };
        };
    };
    createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    content?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        data: components["schemas"]["Post"];
                    };
                };
            };
        };
    };
    getTimeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 正常に処理を終了したかどうか */
                        ok: boolean;
                        /** @description レスポンスコード */
                        code: number;
                        /** @description データ */
                        data: components["schemas"]["Timeline"];
                    };
                };
            };
        };
    };
}
