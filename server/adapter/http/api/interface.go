// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for CallParticipantRole.
const (
	CoHost      CallParticipantRole = "co-host"
	Host        CallParticipantRole = "host"
	Participant CallParticipantRole = "participant"
)

// Defines values for CallRoomJoinableBy.
const (
	CallRoomJoinableByAll       CallRoomJoinableBy = "all"
	CallRoomJoinableByFollowers CallRoomJoinableBy = "followers"
	CallRoomJoinableByFriends   CallRoomJoinableBy = "friends"
	CallRoomJoinableByNobody    CallRoomJoinableBy = "nobody"
)

// Defines values for CallRoomType.
const (
	CallRoomTypeVideo CallRoomType = "video"
	CallRoomTypeVoice CallRoomType = "voice"
)

// Defines values for CreateCallJSONBodyJoinableBy.
const (
	CreateCallJSONBodyJoinableByAll       CreateCallJSONBodyJoinableBy = "all"
	CreateCallJSONBodyJoinableByFollowers CreateCallJSONBodyJoinableBy = "followers"
	CreateCallJSONBodyJoinableByFriends   CreateCallJSONBodyJoinableBy = "friends"
	CreateCallJSONBodyJoinableByNobody    CreateCallJSONBodyJoinableBy = "nobody"
)

// Defines values for CreateCallJSONBodyType.
const (
	CreateCallJSONBodyTypeVideo CreateCallJSONBodyType = "video"
	CreateCallJSONBodyTypeVoice CreateCallJSONBodyType = "voice"
)

// Authorization defines model for Authorization.
type Authorization struct {
	AccessToken  string `json:"access_token"`
	IsNew        bool   `json:"is_new"`
	RefreshToken string `json:"refresh_token"`
	UserId       string `json:"user_id"`
}

// BlockStatus defines model for BlockStatus.
type BlockStatus struct {
	BlockedBy bool `json:"blocked_by"`
	Blocking  bool `json:"blocking"`
}

// CallParticipant defines model for CallParticipant.
type CallParticipant struct {
	Role CallParticipantRole `json:"role"`
	User User                `json:"user"`
}

// CallParticipantRole defines model for CallParticipant.Role.
type CallParticipantRole string

// CallRoom defines model for CallRoom.
type CallRoom struct {
	// Id ID番号
	Id           openapi_types.UUID `json:"id"`
	IsActive     bool               `json:"is_active"`
	JoinableBy   CallRoomJoinableBy `json:"joinable_by"`
	Participants []CallParticipant  `json:"participants"`
	Title        string             `json:"title"`
	Type         CallRoomType       `json:"type"`
}

// CallRoomJoinableBy defines model for CallRoom.JoinableBy.
type CallRoomJoinableBy string

// CallRoomType defines model for CallRoom.Type.
type CallRoomType string

// CallTimeline defines model for CallTimeline.
type CallTimeline struct {
	// NextCursor 次のページを取得するためのキー
	NextCursor openapi_types.UUID `json:"next_cursor"`
	Rooms      []CallRoom         `json:"rooms"`
}

// GatewayURI defines model for GatewayURI.
type GatewayURI struct {
	Uri string `json:"uri"`
}

// Post defines model for Post.
type Post struct {
	Author         User      `json:"author"`
	CreatedAt      time.Time `json:"created_at"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favorites_count"`

	// Id ID番号
	Id        openapi_types.UUID `json:"id"`
	Text      *string            `json:"text"`
	UpdatedAt time.Time          `json:"updated_at"`
}

// PostFavorite defines model for PostFavorite.
type PostFavorite struct {
	CreatedAt time.Time          `json:"created_at"`
	PostId    openapi_types.UUID `json:"post_id"`
	User      User               `json:"user"`
}

// PostTimeline defines model for PostTimeline.
type PostTimeline struct {
	// NextCursor 次のページを取得するためのキー
	NextCursor openapi_types.UUID `json:"next_cursor"`
	Posts      []Post             `json:"posts"`
}

// Response defines model for Response.
type Response struct {
	// Code レスポンスコード
	Code int `json:"code"`

	// Data データ
	Data map[string]interface{} `json:"data"`

	// Ok 正常に処理を終了したかどうか
	Ok bool `json:"ok"`
}

// SocialConnection defines model for SocialConnection.
type SocialConnection struct {
	FollowedBy bool `json:"followed_by"`
	Following  bool `json:"following"`
}

// SocialEngagement defines model for SocialEngagement.
type SocialEngagement struct {
	FavoritesCount int `json:"favorites_count"`
	FollowersCount int `json:"followers_count"`
	FollowingCount int `json:"following_count"`
	MediaCount     int `json:"media_count"`
	PostsCount     int `json:"posts_count"`
}

// User defines model for User.
type User struct {
	AvatarImageUrl *string      `json:"avatar_image_url"`
	BannerImageUrl *string      `json:"banner_image_url"`
	Biography      *string      `json:"biography"`
	BlockStatus    *BlockStatus `json:"block_status,omitempty"`
	CreatedAt      *time.Time   `json:"created_at,omitempty"`

	// CustomId 名前
	CustomId string `json:"custom_id"`

	// Id ID番号
	Id               openapi_types.UUID `json:"id"`
	IsPrivate        *bool              `json:"is_private,omitempty"`
	Nickname         string             `json:"nickname"`
	SocialConnection *SocialConnection  `json:"social_connection,omitempty"`
	SocialEngagement *SocialEngagement  `json:"social_engagement,omitempty"`
	UpdatedAt        *time.Time         `json:"updated_at,omitempty"`
}

// UserFollower defines model for UserFollower.
type UserFollower struct {
	AvatarImageUrl *string      `json:"avatar_image_url"`
	BannerImageUrl *string      `json:"banner_image_url"`
	Biography      *string      `json:"biography"`
	BlockStatus    *BlockStatus `json:"block_status,omitempty"`
	CreatedAt      *time.Time   `json:"created_at,omitempty"`

	// CustomId 名前
	CustomId   string    `json:"custom_id"`
	FollowedAt time.Time `json:"followed_at"`

	// Id ID番号
	Id               openapi_types.UUID `json:"id"`
	IsPrivate        *bool              `json:"is_private,omitempty"`
	Nickname         string             `json:"nickname"`
	SocialConnection *SocialConnection  `json:"social_connection,omitempty"`
	SocialEngagement *SocialEngagement  `json:"social_engagement,omitempty"`
	UpdatedAt        *time.Time         `json:"updated_at,omitempty"`
}

// UserFollowers defines model for UserFollowers.
type UserFollowers struct {
	Users []UserFollower `json:"users"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// AuthorizeWithLineParams defines parameters for AuthorizeWithLine.
type AuthorizeWithLineParams struct {
	Code string `form:"code" json:"code"`
}

// RefreshAuthorizationJSONBody defines parameters for RefreshAuthorization.
type RefreshAuthorizationJSONBody struct {
	RefreshToken string `json:"refresh_token"`
}

// GetCallTimelineParams defines parameters for GetCallTimeline.
type GetCallTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFollowingCallTimelineParams defines parameters for GetFollowingCallTimeline.
type GetFollowingCallTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUserCallTimelineParams defines parameters for GetUserCallTimeline.
type GetUserCallTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateCallJSONBody defines parameters for CreateCall.
type CreateCallJSONBody struct {
	JoinableBy *CreateCallJSONBodyJoinableBy `json:"joinable_by,omitempty"`
	Title      *string                       `json:"title,omitempty"`
	Type       *CreateCallJSONBodyType       `json:"type,omitempty"`
}

// CreateCallJSONBodyJoinableBy defines parameters for CreateCall.
type CreateCallJSONBodyJoinableBy string

// CreateCallJSONBodyType defines parameters for CreateCall.
type CreateCallJSONBodyType string

// CreatePostJSONBody defines parameters for CreatePost.
type CreatePostJSONBody struct {
	ReplyToPostId *openapi_types.UUID `json:"reply_to_post_id,omitempty"`
	RepostPostId  *openapi_types.UUID `json:"repost_post_id,omitempty"`
	Text          *string             `json:"text,omitempty"`
}

// SearchUsersTypeaheadParams defines parameters for SearchUsersTypeahead.
type SearchUsersTypeaheadParams struct {
	CustomId string `form:"custom_id" json:"custom_id"`
}

// GetTimelineParams defines parameters for GetTimeline.
type GetTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFollowingTimelineParams defines parameters for GetFollowingTimeline.
type GetFollowingTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUserTimelineParams defines parameters for GetUserTimeline.
type GetUserTimelineParams struct {
	// Cursor 次のページを取得するためのキー
	Cursor *openapi_types.UUID `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	AvatarImageUrl *string    `json:"avatar_image_url,omitempty"`
	BannerImageUrl *string    `json:"banner_image_url,omitempty"`
	Biography      *string    `json:"biography,omitempty"`
	Birthdate      *time.Time `json:"birthdate,omitempty"`
	CustomId       *string    `json:"custom_id,omitempty"`
	Nickname       *string    `json:"nickname,omitempty"`
}

// RefreshAuthorizationJSONRequestBody defines body for RefreshAuthorization for application/json ContentType.
type RefreshAuthorizationJSONRequestBody RefreshAuthorizationJSONBody

// CreateCallJSONRequestBody defines body for CreateCall for application/json ContentType.
type CreateCallJSONRequestBody CreateCallJSONBody

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody CreatePostJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthorizeWithCustomID request
	AuthorizeWithCustomID(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthorizeWithLine request
	AuthorizeWithLine(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAuthorizationWithBody request with any body
	RefreshAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshAuthorization(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallTimeline request
	GetCallTimeline(ctx context.Context, params *GetCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFollowingCallTimeline request
	GetFollowingCallTimeline(ctx context.Context, params *GetFollowingCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCallTimeline request
	GetUserCallTimeline(ctx context.Context, userId openapi_types.UUID, params *GetUserCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCallWithBody request with any body
	CreateCallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCall(ctx context.Context, body CreateCallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndCall request
	EndCall(ctx context.Context, callId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayURI request
	GetGatewayURI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePostWithBody request with any body
	CreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePost(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePost request
	DeletePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostByID request
	GetPostByID(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnfavoritePost request
	UnfavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostFavorites request
	GetPostFavorites(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FavoritePost request
	FavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsersTypeahead request
	SearchUsersTypeahead(ctx context.Context, params *SearchUsersTypeaheadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeline request
	GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFollowingTimeline request
	GetFollowingTimeline(ctx context.Context, params *GetFollowingTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTimeline request
	GetUserTimeline(ctx context.Context, userId openapi_types.UUID, params *GetUserTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBlocking request
	GetUserBlocking(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByCustomID request
	GetUserByCustomID(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelf request
	GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnblockUser request
	UnblockUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlockUser request
	BlockUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFollowers request
	GetUserFollowers(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromFollowers request
	RemoveUserFromFollowers(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFollowing request
	GetUserFollowing(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnfollowUser request
	UnfollowUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FollowUser request
	FollowUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthorizeWithCustomID(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeWithCustomIDRequest(c.Server, customId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizeWithLine(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeWithLineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAuthorizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAuthorizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAuthorization(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAuthorizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallTimeline(ctx context.Context, params *GetCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFollowingCallTimeline(ctx context.Context, params *GetFollowingCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFollowingCallTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCallTimeline(ctx context.Context, userId openapi_types.UUID, params *GetUserCallTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCallTimelineRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCall(ctx context.Context, body CreateCallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndCall(ctx context.Context, callId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndCallRequest(c.Server, callId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayURI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayURIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePost(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostByID(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostByIDRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfavoritePostRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostFavorites(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostFavoritesRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FavoritePost(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFavoritePostRequest(c.Server, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsersTypeahead(ctx context.Context, params *SearchUsersTypeaheadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsersTypeaheadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeline(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFollowingTimeline(ctx context.Context, params *GetFollowingTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFollowingTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTimeline(ctx context.Context, userId openapi_types.UUID, params *GetUserTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTimelineRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBlocking(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBlockingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByCustomID(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByCustomIDRequest(c.Server, customId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnblockUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnblockUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlockUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlockUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFollowers(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFollowersRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromFollowers(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromFollowersRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFollowing(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFollowingRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfollowUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfollowUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUser(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthorizeWithCustomIDRequest generates requests for AuthorizeWithCustomID
func NewAuthorizeWithCustomIDRequest(server string, customId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_id", runtime.ParamLocationPath, customId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/custom_id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthorizeWithLineRequest generates requests for AuthorizeWithLine
func NewAuthorizeWithLineRequest(server string, params *AuthorizeWithLineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/line")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAuthorizationRequest calls the generic RefreshAuthorization builder with application/json body
func NewRefreshAuthorizationRequest(server string, body RefreshAuthorizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshAuthorizationRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshAuthorizationRequestWithBody generates requests for RefreshAuthorization with any type of body
func NewRefreshAuthorizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCallTimelineRequest generates requests for GetCallTimeline
func NewGetCallTimelineRequest(server string, params *GetCallTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/call_timeline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFollowingCallTimelineRequest generates requests for GetFollowingCallTimeline
func NewGetFollowingCallTimelineRequest(server string, params *GetFollowingCallTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/call_timeline/following")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserCallTimelineRequest generates requests for GetUserCallTimeline
func NewGetUserCallTimelineRequest(server string, userId openapi_types.UUID, params *GetUserCallTimelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/call_timeline/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCallRequest calls the generic CreateCall builder with application/json body
func NewCreateCallRequest(server string, body CreateCallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCallRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCallRequestWithBody generates requests for CreateCall with any type of body
func NewCreateCallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndCallRequest generates requests for EndCall
func NewEndCallRequest(server string, callId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "call_id", runtime.ParamLocationPath, callId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/end", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayURIRequest generates requests for GetGatewayURI
func NewGetGatewayURIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePostRequest calls the generic CreatePost builder with application/json body
func NewCreatePostRequest(server string, body CreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePostRequestWithBody generates requests for CreatePost with any type of body
func NewCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostRequest generates requests for DeletePost
func NewDeletePostRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostByIDRequest generates requests for GetPostByID
func NewGetPostByIDRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnfavoritePostRequest generates requests for UnfavoritePost
func NewUnfavoritePostRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostFavoritesRequest generates requests for GetPostFavorites
func NewGetPostFavoritesRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFavoritePostRequest generates requests for FavoritePost
func NewFavoritePostRequest(server string, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "post_id", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/posts/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchUsersTypeaheadRequest generates requests for SearchUsersTypeahead
func NewSearchUsersTypeaheadRequest(server string, params *SearchUsersTypeaheadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/users/typeahead")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_id", runtime.ParamLocationQuery, params.CustomId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimelineRequest generates requests for GetTimeline
func NewGetTimelineRequest(server string, params *GetTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFollowingTimelineRequest generates requests for GetFollowingTimeline
func NewGetFollowingTimelineRequest(server string, params *GetFollowingTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/following")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTimelineRequest generates requests for GetUserTimeline
func NewGetUserTimelineRequest(server string, userId openapi_types.UUID, params *GetUserTimelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBlockingRequest generates requests for GetUserBlocking
func NewGetUserBlockingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/blocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByCustomIDRequest generates requests for GetUserByCustomID
func NewGetUserByCustomIDRequest(server string, customId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "custom_id", runtime.ParamLocationPath, customId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/custom_id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfRequest generates requests for GetSelf
func NewGetSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnblockUserRequest generates requests for UnblockUser
func NewUnblockUserRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/blocks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlockUserRequest generates requests for BlockUser
func NewBlockUserRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/blocks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserFollowersRequest generates requests for GetUserFollowers
func NewGetUserFollowersRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromFollowersRequest generates requests for RemoveUserFromFollowers
func NewRemoveUserFromFollowersRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserFollowingRequest generates requests for GetUserFollowing
func NewGetUserFollowingRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnfollowUserRequest generates requests for UnfollowUser
func NewUnfollowUserRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/follows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFollowUserRequest generates requests for FollowUser
func NewFollowUserRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/follows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthorizeWithCustomIDWithResponse request
	AuthorizeWithCustomIDWithResponse(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*AuthorizeWithCustomIDResponse, error)

	// AuthorizeWithLineWithResponse request
	AuthorizeWithLineWithResponse(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*AuthorizeWithLineResponse, error)

	// RefreshAuthorizationWithBodyWithResponse request with any body
	RefreshAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error)

	RefreshAuthorizationWithResponse(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error)

	// GetCallTimelineWithResponse request
	GetCallTimelineWithResponse(ctx context.Context, params *GetCallTimelineParams, reqEditors ...RequestEditorFn) (*GetCallTimelineResponse, error)

	// GetFollowingCallTimelineWithResponse request
	GetFollowingCallTimelineWithResponse(ctx context.Context, params *GetFollowingCallTimelineParams, reqEditors ...RequestEditorFn) (*GetFollowingCallTimelineResponse, error)

	// GetUserCallTimelineWithResponse request
	GetUserCallTimelineWithResponse(ctx context.Context, userId openapi_types.UUID, params *GetUserCallTimelineParams, reqEditors ...RequestEditorFn) (*GetUserCallTimelineResponse, error)

	// CreateCallWithBodyWithResponse request with any body
	CreateCallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallResponse, error)

	CreateCallWithResponse(ctx context.Context, body CreateCallJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCallResponse, error)

	// EndCallWithResponse request
	EndCallWithResponse(ctx context.Context, callId openapi_types.UUID, reqEditors ...RequestEditorFn) (*EndCallResponse, error)

	// GetGatewayURIWithResponse request
	GetGatewayURIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayURIResponse, error)

	// CreatePostWithBodyWithResponse request with any body
	CreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostResponse, error)

	CreatePostWithResponse(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostResponse, error)

	// DeletePostWithResponse request
	DeletePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePostResponse, error)

	// GetPostByIDWithResponse request
	GetPostByIDWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPostByIDResponse, error)

	// UnfavoritePostWithResponse request
	UnfavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfavoritePostResponse, error)

	// GetPostFavoritesWithResponse request
	GetPostFavoritesWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPostFavoritesResponse, error)

	// FavoritePostWithResponse request
	FavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FavoritePostResponse, error)

	// SearchUsersTypeaheadWithResponse request
	SearchUsersTypeaheadWithResponse(ctx context.Context, params *SearchUsersTypeaheadParams, reqEditors ...RequestEditorFn) (*SearchUsersTypeaheadResponse, error)

	// GetTimelineWithResponse request
	GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error)

	// GetFollowingTimelineWithResponse request
	GetFollowingTimelineWithResponse(ctx context.Context, params *GetFollowingTimelineParams, reqEditors ...RequestEditorFn) (*GetFollowingTimelineResponse, error)

	// GetUserTimelineWithResponse request
	GetUserTimelineWithResponse(ctx context.Context, userId openapi_types.UUID, params *GetUserTimelineParams, reqEditors ...RequestEditorFn) (*GetUserTimelineResponse, error)

	// GetUserBlockingWithResponse request
	GetUserBlockingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBlockingResponse, error)

	// GetUserByCustomIDWithResponse request
	GetUserByCustomIDWithResponse(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*GetUserByCustomIDResponse, error)

	// GetSelfWithResponse request
	GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// UnblockUserWithResponse request
	UnblockUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnblockUserResponse, error)

	// BlockUserWithResponse request
	BlockUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BlockUserResponse, error)

	// GetUserFollowersWithResponse request
	GetUserFollowersWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error)

	// RemoveUserFromFollowersWithResponse request
	RemoveUserFromFollowersWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error)

	// GetUserFollowingWithResponse request
	GetUserFollowingWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserFollowingResponse, error)

	// UnfollowUserWithResponse request
	UnfollowUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error)

	// FollowUserWithResponse request
	FollowUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FollowUserResponse, error)
}

type AuthorizeWithCustomIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data Authorization `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthorizeWithCustomIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeWithCustomIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthorizeWithLineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data Authorization `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthorizeWithLineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeWithLineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data Authorization `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r RefreshAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data CallTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCallTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFollowingCallTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data CallTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFollowingCallTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFollowingCallTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCallTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data CallTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserCallTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCallTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int      `json:"code"`
		Data CallRoom `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int      `json:"code"`
		Data CallRoom `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r EndCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayURIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int        `json:"code"`
		Data GatewayURI `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGatewayURIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayURIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data Post `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int `json:"code"`

		// Data データ
		Data map[string]interface{} `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data Post `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfavoritePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r UnfavoritePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfavoritePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostFavoritesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int `json:"code"`

		// Data データ
		Data []PostFavorite `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostFavoritesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostFavoritesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FavoritePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r FavoritePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FavoritePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsersTypeaheadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int   `json:"code"`
		Data Users `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchUsersTypeaheadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsersTypeaheadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data PostTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFollowingTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data PostTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFollowingTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFollowingTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int          `json:"code"`
		Data PostTimeline `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBlockingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int   `json:"code"`
		Data Users `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserBlockingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBlockingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByCustomIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserByCustomIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByCustomIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int  `json:"code"`
		Data User `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnblockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r UnblockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnblockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r BlockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int           `json:"code"`
		Data UserFollowers `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int              `json:"code"`
		Data SocialConnection `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFollowingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int   `json:"code"`
		Data Users `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int              `json:"code"`
		Data SocialConnection `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r UnfollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Code レスポンスコード
		Code int              `json:"code"`
		Data SocialConnection `json:"data"`

		// Ok 正常に処理を終了したかどうか
		Ok bool `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r FollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthorizeWithCustomIDWithResponse request returning *AuthorizeWithCustomIDResponse
func (c *ClientWithResponses) AuthorizeWithCustomIDWithResponse(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*AuthorizeWithCustomIDResponse, error) {
	rsp, err := c.AuthorizeWithCustomID(ctx, customId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeWithCustomIDResponse(rsp)
}

// AuthorizeWithLineWithResponse request returning *AuthorizeWithLineResponse
func (c *ClientWithResponses) AuthorizeWithLineWithResponse(ctx context.Context, params *AuthorizeWithLineParams, reqEditors ...RequestEditorFn) (*AuthorizeWithLineResponse, error) {
	rsp, err := c.AuthorizeWithLine(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeWithLineResponse(rsp)
}

// RefreshAuthorizationWithBodyWithResponse request with arbitrary body returning *RefreshAuthorizationResponse
func (c *ClientWithResponses) RefreshAuthorizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error) {
	rsp, err := c.RefreshAuthorizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAuthorizationResponse(rsp)
}

func (c *ClientWithResponses) RefreshAuthorizationWithResponse(ctx context.Context, body RefreshAuthorizationJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshAuthorizationResponse, error) {
	rsp, err := c.RefreshAuthorization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAuthorizationResponse(rsp)
}

// GetCallTimelineWithResponse request returning *GetCallTimelineResponse
func (c *ClientWithResponses) GetCallTimelineWithResponse(ctx context.Context, params *GetCallTimelineParams, reqEditors ...RequestEditorFn) (*GetCallTimelineResponse, error) {
	rsp, err := c.GetCallTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallTimelineResponse(rsp)
}

// GetFollowingCallTimelineWithResponse request returning *GetFollowingCallTimelineResponse
func (c *ClientWithResponses) GetFollowingCallTimelineWithResponse(ctx context.Context, params *GetFollowingCallTimelineParams, reqEditors ...RequestEditorFn) (*GetFollowingCallTimelineResponse, error) {
	rsp, err := c.GetFollowingCallTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFollowingCallTimelineResponse(rsp)
}

// GetUserCallTimelineWithResponse request returning *GetUserCallTimelineResponse
func (c *ClientWithResponses) GetUserCallTimelineWithResponse(ctx context.Context, userId openapi_types.UUID, params *GetUserCallTimelineParams, reqEditors ...RequestEditorFn) (*GetUserCallTimelineResponse, error) {
	rsp, err := c.GetUserCallTimeline(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCallTimelineResponse(rsp)
}

// CreateCallWithBodyWithResponse request with arbitrary body returning *CreateCallResponse
func (c *ClientWithResponses) CreateCallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallResponse, error) {
	rsp, err := c.CreateCallWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallResponse(rsp)
}

func (c *ClientWithResponses) CreateCallWithResponse(ctx context.Context, body CreateCallJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCallResponse, error) {
	rsp, err := c.CreateCall(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallResponse(rsp)
}

// EndCallWithResponse request returning *EndCallResponse
func (c *ClientWithResponses) EndCallWithResponse(ctx context.Context, callId openapi_types.UUID, reqEditors ...RequestEditorFn) (*EndCallResponse, error) {
	rsp, err := c.EndCall(ctx, callId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndCallResponse(rsp)
}

// GetGatewayURIWithResponse request returning *GetGatewayURIResponse
func (c *ClientWithResponses) GetGatewayURIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayURIResponse, error) {
	rsp, err := c.GetGatewayURI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayURIResponse(rsp)
}

// CreatePostWithBodyWithResponse request with arbitrary body returning *CreatePostResponse
func (c *ClientWithResponses) CreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePostResponse, error) {
	rsp, err := c.CreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreatePostWithResponse(ctx context.Context, body CreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePostResponse, error) {
	rsp, err := c.CreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePostResponse(rsp)
}

// DeletePostWithResponse request returning *DeletePostResponse
func (c *ClientWithResponses) DeletePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePostResponse, error) {
	rsp, err := c.DeletePost(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostResponse(rsp)
}

// GetPostByIDWithResponse request returning *GetPostByIDResponse
func (c *ClientWithResponses) GetPostByIDWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPostByIDResponse, error) {
	rsp, err := c.GetPostByID(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostByIDResponse(rsp)
}

// UnfavoritePostWithResponse request returning *UnfavoritePostResponse
func (c *ClientWithResponses) UnfavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfavoritePostResponse, error) {
	rsp, err := c.UnfavoritePost(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfavoritePostResponse(rsp)
}

// GetPostFavoritesWithResponse request returning *GetPostFavoritesResponse
func (c *ClientWithResponses) GetPostFavoritesWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPostFavoritesResponse, error) {
	rsp, err := c.GetPostFavorites(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostFavoritesResponse(rsp)
}

// FavoritePostWithResponse request returning *FavoritePostResponse
func (c *ClientWithResponses) FavoritePostWithResponse(ctx context.Context, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FavoritePostResponse, error) {
	rsp, err := c.FavoritePost(ctx, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFavoritePostResponse(rsp)
}

// SearchUsersTypeaheadWithResponse request returning *SearchUsersTypeaheadResponse
func (c *ClientWithResponses) SearchUsersTypeaheadWithResponse(ctx context.Context, params *SearchUsersTypeaheadParams, reqEditors ...RequestEditorFn) (*SearchUsersTypeaheadResponse, error) {
	rsp, err := c.SearchUsersTypeahead(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsersTypeaheadResponse(rsp)
}

// GetTimelineWithResponse request returning *GetTimelineResponse
func (c *ClientWithResponses) GetTimelineWithResponse(ctx context.Context, params *GetTimelineParams, reqEditors ...RequestEditorFn) (*GetTimelineResponse, error) {
	rsp, err := c.GetTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimelineResponse(rsp)
}

// GetFollowingTimelineWithResponse request returning *GetFollowingTimelineResponse
func (c *ClientWithResponses) GetFollowingTimelineWithResponse(ctx context.Context, params *GetFollowingTimelineParams, reqEditors ...RequestEditorFn) (*GetFollowingTimelineResponse, error) {
	rsp, err := c.GetFollowingTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFollowingTimelineResponse(rsp)
}

// GetUserTimelineWithResponse request returning *GetUserTimelineResponse
func (c *ClientWithResponses) GetUserTimelineWithResponse(ctx context.Context, userId openapi_types.UUID, params *GetUserTimelineParams, reqEditors ...RequestEditorFn) (*GetUserTimelineResponse, error) {
	rsp, err := c.GetUserTimeline(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTimelineResponse(rsp)
}

// GetUserBlockingWithResponse request returning *GetUserBlockingResponse
func (c *ClientWithResponses) GetUserBlockingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBlockingResponse, error) {
	rsp, err := c.GetUserBlocking(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBlockingResponse(rsp)
}

// GetUserByCustomIDWithResponse request returning *GetUserByCustomIDResponse
func (c *ClientWithResponses) GetUserByCustomIDWithResponse(ctx context.Context, customId string, reqEditors ...RequestEditorFn) (*GetUserByCustomIDResponse, error) {
	rsp, err := c.GetUserByCustomID(ctx, customId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByCustomIDResponse(rsp)
}

// GetSelfWithResponse request returning *GetSelfResponse
func (c *ClientWithResponses) GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error) {
	rsp, err := c.GetSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// UnblockUserWithResponse request returning *UnblockUserResponse
func (c *ClientWithResponses) UnblockUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnblockUserResponse, error) {
	rsp, err := c.UnblockUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnblockUserResponse(rsp)
}

// BlockUserWithResponse request returning *BlockUserResponse
func (c *ClientWithResponses) BlockUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BlockUserResponse, error) {
	rsp, err := c.BlockUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlockUserResponse(rsp)
}

// GetUserFollowersWithResponse request returning *GetUserFollowersResponse
func (c *ClientWithResponses) GetUserFollowersWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error) {
	rsp, err := c.GetUserFollowers(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFollowersResponse(rsp)
}

// RemoveUserFromFollowersWithResponse request returning *RemoveUserFromFollowersResponse
func (c *ClientWithResponses) RemoveUserFromFollowersWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveUserFromFollowersResponse, error) {
	rsp, err := c.RemoveUserFromFollowers(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromFollowersResponse(rsp)
}

// GetUserFollowingWithResponse request returning *GetUserFollowingResponse
func (c *ClientWithResponses) GetUserFollowingWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserFollowingResponse, error) {
	rsp, err := c.GetUserFollowing(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFollowingResponse(rsp)
}

// UnfollowUserWithResponse request returning *UnfollowUserResponse
func (c *ClientWithResponses) UnfollowUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error) {
	rsp, err := c.UnfollowUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfollowUserResponse(rsp)
}

// FollowUserWithResponse request returning *FollowUserResponse
func (c *ClientWithResponses) FollowUserWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*FollowUserResponse, error) {
	rsp, err := c.FollowUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUserResponse(rsp)
}

// ParseAuthorizeWithCustomIDResponse parses an HTTP response from a AuthorizeWithCustomIDWithResponse call
func ParseAuthorizeWithCustomIDResponse(rsp *http.Response) (*AuthorizeWithCustomIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeWithCustomIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data Authorization `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthorizeWithLineResponse parses an HTTP response from a AuthorizeWithLineWithResponse call
func ParseAuthorizeWithLineResponse(rsp *http.Response) (*AuthorizeWithLineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeWithLineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data Authorization `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshAuthorizationResponse parses an HTTP response from a RefreshAuthorizationWithResponse call
func ParseRefreshAuthorizationResponse(rsp *http.Response) (*RefreshAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data Authorization `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallTimelineResponse parses an HTTP response from a GetCallTimelineWithResponse call
func ParseGetCallTimelineResponse(rsp *http.Response) (*GetCallTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data CallTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFollowingCallTimelineResponse parses an HTTP response from a GetFollowingCallTimelineWithResponse call
func ParseGetFollowingCallTimelineResponse(rsp *http.Response) (*GetFollowingCallTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFollowingCallTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data CallTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserCallTimelineResponse parses an HTTP response from a GetUserCallTimelineWithResponse call
func ParseGetUserCallTimelineResponse(rsp *http.Response) (*GetUserCallTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCallTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data CallTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCallResponse parses an HTTP response from a CreateCallWithResponse call
func ParseCreateCallResponse(rsp *http.Response) (*CreateCallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int      `json:"code"`
			Data CallRoom `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndCallResponse parses an HTTP response from a EndCallWithResponse call
func ParseEndCallResponse(rsp *http.Response) (*EndCallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int      `json:"code"`
			Data CallRoom `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGatewayURIResponse parses an HTTP response from a GetGatewayURIWithResponse call
func ParseGetGatewayURIResponse(rsp *http.Response) (*GetGatewayURIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayURIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int        `json:"code"`
			Data GatewayURI `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePostResponse parses an HTTP response from a CreatePostWithResponse call
func ParseCreatePostResponse(rsp *http.Response) (*CreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data Post `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostResponse parses an HTTP response from a DeletePostWithResponse call
func ParseDeletePostResponse(rsp *http.Response) (*DeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int `json:"code"`

			// Data データ
			Data map[string]interface{} `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostByIDResponse parses an HTTP response from a GetPostByIDWithResponse call
func ParseGetPostByIDResponse(rsp *http.Response) (*GetPostByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data Post `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnfavoritePostResponse parses an HTTP response from a UnfavoritePostWithResponse call
func ParseUnfavoritePostResponse(rsp *http.Response) (*UnfavoritePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfavoritePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostFavoritesResponse parses an HTTP response from a GetPostFavoritesWithResponse call
func ParseGetPostFavoritesResponse(rsp *http.Response) (*GetPostFavoritesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostFavoritesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int `json:"code"`

			// Data データ
			Data []PostFavorite `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFavoritePostResponse parses an HTTP response from a FavoritePostWithResponse call
func ParseFavoritePostResponse(rsp *http.Response) (*FavoritePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FavoritePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchUsersTypeaheadResponse parses an HTTP response from a SearchUsersTypeaheadWithResponse call
func ParseSearchUsersTypeaheadResponse(rsp *http.Response) (*SearchUsersTypeaheadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsersTypeaheadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int   `json:"code"`
			Data Users `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimelineResponse parses an HTTP response from a GetTimelineWithResponse call
func ParseGetTimelineResponse(rsp *http.Response) (*GetTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data PostTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFollowingTimelineResponse parses an HTTP response from a GetFollowingTimelineWithResponse call
func ParseGetFollowingTimelineResponse(rsp *http.Response) (*GetFollowingTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFollowingTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data PostTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserTimelineResponse parses an HTTP response from a GetUserTimelineWithResponse call
func ParseGetUserTimelineResponse(rsp *http.Response) (*GetUserTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int          `json:"code"`
			Data PostTimeline `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserBlockingResponse parses an HTTP response from a GetUserBlockingWithResponse call
func ParseGetUserBlockingResponse(rsp *http.Response) (*GetUserBlockingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBlockingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int   `json:"code"`
			Data Users `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserByCustomIDResponse parses an HTTP response from a GetUserByCustomIDWithResponse call
func ParseGetUserByCustomIDResponse(rsp *http.Response) (*GetUserByCustomIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByCustomIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSelfResponse parses an HTTP response from a GetSelfWithResponse call
func ParseGetSelfResponse(rsp *http.Response) (*GetSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int  `json:"code"`
			Data User `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnblockUserResponse parses an HTTP response from a UnblockUserWithResponse call
func ParseUnblockUserResponse(rsp *http.Response) (*UnblockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnblockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBlockUserResponse parses an HTTP response from a BlockUserWithResponse call
func ParseBlockUserResponse(rsp *http.Response) (*BlockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserFollowersResponse parses an HTTP response from a GetUserFollowersWithResponse call
func ParseGetUserFollowersResponse(rsp *http.Response) (*GetUserFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int           `json:"code"`
			Data UserFollowers `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromFollowersResponse parses an HTTP response from a RemoveUserFromFollowersWithResponse call
func ParseRemoveUserFromFollowersResponse(rsp *http.Response) (*RemoveUserFromFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int              `json:"code"`
			Data SocialConnection `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserFollowingResponse parses an HTTP response from a GetUserFollowingWithResponse call
func ParseGetUserFollowingResponse(rsp *http.Response) (*GetUserFollowingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int   `json:"code"`
			Data Users `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnfollowUserResponse parses an HTTP response from a UnfollowUserWithResponse call
func ParseUnfollowUserResponse(rsp *http.Response) (*UnfollowUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int              `json:"code"`
			Data SocialConnection `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFollowUserResponse parses an HTTP response from a FollowUserWithResponse call
func ParseFollowUserResponse(rsp *http.Response) (*FollowUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Code レスポンスコード
			Code int              `json:"code"`
			Data SocialConnection `json:"data"`

			// Ok 正常に処理を終了したかどうか
			Ok bool `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// カスタムIDでログイン（テスト用）
	// (POST /authorize/custom_id/{custom_id})
	AuthorizeWithCustomID(ctx echo.Context, customId string) error
	// LINE でログイン
	// (POST /authorize/line)
	AuthorizeWithLine(ctx echo.Context, params AuthorizeWithLineParams) error
	// 認証トークンを更新
	// (POST /authorize/refresh)
	RefreshAuthorization(ctx echo.Context) error
	// オープンの通話タイムラインを取得する
	// (GET /call_timeline)
	GetCallTimeline(ctx echo.Context, params GetCallTimelineParams) error
	// フォロー中の通話タイムラインを取得する
	// (GET /call_timeline/following)
	GetFollowingCallTimeline(ctx echo.Context, params GetFollowingCallTimelineParams) error
	// ユーザーの通話タイムラインを取得する
	// (GET /call_timeline/users/{user_id})
	GetUserCallTimeline(ctx echo.Context, userId openapi_types.UUID, params GetUserCallTimelineParams) error
	// 通話を作成する
	// (POST /calls)
	CreateCall(ctx echo.Context) error
	// 通話を終了する
	// (PUT /calls/{call_id}/end)
	EndCall(ctx echo.Context, callId openapi_types.UUID) error
	// ゲートウェイの接続 URI を取得する
	// (GET /gateway)
	GetGatewayURI(ctx echo.Context) error
	// 投稿を作成する
	// (POST /posts)
	CreatePost(ctx echo.Context) error
	// 投稿を削除する
	// (DELETE /posts/{post_id})
	DeletePost(ctx echo.Context, postId openapi_types.UUID) error
	// 投稿を取得する
	// (GET /posts/{post_id})
	GetPostByID(ctx echo.Context, postId openapi_types.UUID) error
	// 投稿のいいねを解除する
	// (DELETE /posts/{post_id}/favorites)
	UnfavoritePost(ctx echo.Context, postId openapi_types.UUID) error
	// 投稿にいいねしたユーザーを取得する
	// (GET /posts/{post_id}/favorites)
	GetPostFavorites(ctx echo.Context, postId openapi_types.UUID) error
	// 投稿にいいねする
	// (POST /posts/{post_id}/favorites)
	FavoritePost(ctx echo.Context, postId openapi_types.UUID) error
	// ユーザーの検索候補を取得する
	// (GET /search/users/typeahead)
	SearchUsersTypeahead(ctx echo.Context, params SearchUsersTypeaheadParams) error
	// オープンのタイムラインを取得する
	// (GET /timeline)
	GetTimeline(ctx echo.Context, params GetTimelineParams) error
	// フォロー中のタイムラインを取得する
	// (GET /timeline/following)
	GetFollowingTimeline(ctx echo.Context, params GetFollowingTimelineParams) error
	// ユーザーのタイムラインを取得する
	// (GET /timeline/users/{user_id})
	GetUserTimeline(ctx echo.Context, userId openapi_types.UUID, params GetUserTimelineParams) error
	// ユーザーのブロック一覧を取得する
	// (GET /users/blocks)
	GetUserBlocking(ctx echo.Context) error
	// カスタムIDでユーザーを取得する
	// (GET /users/custom_id/{custom_id})
	GetUserByCustomID(ctx echo.Context, customId string) error
	// 自分を取得する
	// (GET /users/me)
	GetSelf(ctx echo.Context) error
	// ユーザーを更新する
	// (PUT /users/update)
	UpdateUser(ctx echo.Context) error
	// ユーザーをアンブロックする
	// (DELETE /users/{user_id}/blocks)
	UnblockUser(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーをブロックする
	// (POST /users/{user_id}/blocks)
	BlockUser(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーのフォロワー一覧を取得する
	// (GET /users/{user_id}/followers)
	GetUserFollowers(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーをフォロワーから削除する
	// (DELETE /users/{user_id}/following)
	RemoveUserFromFollowers(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーのフォロー一覧を取得する
	// (GET /users/{user_id}/following)
	GetUserFollowing(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーをアンフォローする
	// (DELETE /users/{user_id}/follows)
	UnfollowUser(ctx echo.Context, userId openapi_types.UUID) error
	// ユーザーをフォローする
	// (POST /users/{user_id}/follows)
	FollowUser(ctx echo.Context, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthorizeWithCustomID converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeWithCustomID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_id" -------------
	var customId string

	err = runtime.BindStyledParameterWithOptions("simple", "custom_id", ctx.Param("custom_id"), &customId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeWithCustomID(ctx, customId)
	return err
}

// AuthorizeWithLine converts echo context to params.
func (w *ServerInterfaceWrapper) AuthorizeWithLine(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeWithLineParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthorizeWithLine(ctx, params)
	return err
}

// RefreshAuthorization converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshAuthorization(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshAuthorization(ctx)
	return err
}

// GetCallTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallTimeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCallTimeline(ctx, params)
	return err
}

// GetFollowingCallTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetFollowingCallTimeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowingCallTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFollowingCallTimeline(ctx, params)
	return err
}

// GetUserCallTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserCallTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserCallTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserCallTimeline(ctx, userId, params)
	return err
}

// CreateCall converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCall(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCall(ctx)
	return err
}

// EndCall converts echo context to params.
func (w *ServerInterfaceWrapper) EndCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "call_id" -------------
	var callId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "call_id", ctx.Param("call_id"), &callId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter call_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EndCall(ctx, callId)
	return err
}

// GetGatewayURI converts echo context to params.
func (w *ServerInterfaceWrapper) GetGatewayURI(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGatewayURI(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePost(ctx, postId)
	return err
}

// GetPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostByID(ctx, postId)
	return err
}

// UnfavoritePost converts echo context to params.
func (w *ServerInterfaceWrapper) UnfavoritePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnfavoritePost(ctx, postId)
	return err
}

// GetPostFavorites converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostFavorites(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostFavorites(ctx, postId)
	return err
}

// FavoritePost converts echo context to params.
func (w *ServerInterfaceWrapper) FavoritePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", ctx.Param("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FavoritePost(ctx, postId)
	return err
}

// SearchUsersTypeahead converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUsersTypeahead(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUsersTypeaheadParams
	// ------------- Required query parameter "custom_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "custom_id", ctx.QueryParams(), &params.CustomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchUsersTypeahead(ctx, params)
	return err
}

// GetTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeline(ctx, params)
	return err
}

// GetFollowingTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetFollowingTimeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowingTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFollowingTimeline(ctx, params)
	return err
}

// GetUserTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserTimelineParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTimeline(ctx, userId, params)
	return err
}

// GetUserBlocking converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBlocking(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserBlocking(ctx)
	return err
}

// GetUserByCustomID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserByCustomID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "custom_id" -------------
	var customId string

	err = runtime.BindStyledParameterWithOptions("simple", "custom_id", ctx.Param("custom_id"), &customId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter custom_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserByCustomID(ctx, customId)
	return err
}

// GetSelf converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelf(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSelf(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// UnblockUser converts echo context to params.
func (w *ServerInterfaceWrapper) UnblockUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnblockUser(ctx, userId)
	return err
}

// BlockUser converts echo context to params.
func (w *ServerInterfaceWrapper) BlockUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BlockUser(ctx, userId)
	return err
}

// GetUserFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserFollowers(ctx, userId)
	return err
}

// RemoveUserFromFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveUserFromFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveUserFromFollowers(ctx, userId)
	return err
}

// GetUserFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserFollowing(ctx, userId)
	return err
}

// UnfollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) UnfollowUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnfollowUser(ctx, userId)
	return err
}

// FollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) FollowUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FollowUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorize/custom_id/:custom_id", wrapper.AuthorizeWithCustomID)
	router.POST(baseURL+"/authorize/line", wrapper.AuthorizeWithLine)
	router.POST(baseURL+"/authorize/refresh", wrapper.RefreshAuthorization)
	router.GET(baseURL+"/call_timeline", wrapper.GetCallTimeline)
	router.GET(baseURL+"/call_timeline/following", wrapper.GetFollowingCallTimeline)
	router.GET(baseURL+"/call_timeline/users/:user_id", wrapper.GetUserCallTimeline)
	router.POST(baseURL+"/calls", wrapper.CreateCall)
	router.PUT(baseURL+"/calls/:call_id/end", wrapper.EndCall)
	router.GET(baseURL+"/gateway", wrapper.GetGatewayURI)
	router.POST(baseURL+"/posts", wrapper.CreatePost)
	router.DELETE(baseURL+"/posts/:post_id", wrapper.DeletePost)
	router.GET(baseURL+"/posts/:post_id", wrapper.GetPostByID)
	router.DELETE(baseURL+"/posts/:post_id/favorites", wrapper.UnfavoritePost)
	router.GET(baseURL+"/posts/:post_id/favorites", wrapper.GetPostFavorites)
	router.POST(baseURL+"/posts/:post_id/favorites", wrapper.FavoritePost)
	router.GET(baseURL+"/search/users/typeahead", wrapper.SearchUsersTypeahead)
	router.GET(baseURL+"/timeline", wrapper.GetTimeline)
	router.GET(baseURL+"/timeline/following", wrapper.GetFollowingTimeline)
	router.GET(baseURL+"/timeline/users/:user_id", wrapper.GetUserTimeline)
	router.GET(baseURL+"/users/blocks", wrapper.GetUserBlocking)
	router.GET(baseURL+"/users/custom_id/:custom_id", wrapper.GetUserByCustomID)
	router.GET(baseURL+"/users/me", wrapper.GetSelf)
	router.PUT(baseURL+"/users/update", wrapper.UpdateUser)
	router.DELETE(baseURL+"/users/:user_id/blocks", wrapper.UnblockUser)
	router.POST(baseURL+"/users/:user_id/blocks", wrapper.BlockUser)
	router.GET(baseURL+"/users/:user_id/followers", wrapper.GetUserFollowers)
	router.DELETE(baseURL+"/users/:user_id/following", wrapper.RemoveUserFromFollowers)
	router.GET(baseURL+"/users/:user_id/following", wrapper.GetUserFollowing)
	router.DELETE(baseURL+"/users/:user_id/follows", wrapper.UnfollowUser)
	router.POST(baseURL+"/users/:user_id/follows", wrapper.FollowUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcX2/cxhH/Kgbbx7NPad/0VslWICAoDClCHwzjsCJXurVILrNcyrkKB/h4hSzFcGMI",
	"tQ27LprGrv9GdlqnqVqo9YdZn6Q85SsEu8vj3yWPJ51j3ZlAkDDH5XD2N7+ZnZ0dakPTseVgG9rU1aY3",
	"NFdvQguIy994tIkJ+j2gCNv8B4dgBxKKoLgNdB26boPiNSju0pYDtWnNpQTZq1q7piG3YcOrsVvLGJsQ",
	"2PwegSsEus2Cpz0XkgYyFPfE4595iEBDm74UDqwlNUq/I9Tncq0vEC9fgTrlL5sxsb62SAH13OxEl/lN",
	"aDSWW+q5iPtcM8XdlK7h0FpcqkqjWWCaFwGhSEcOsGlWK4JNyP8Lbc/iopvYpVpN0/HZ4MqJPR29IQkw",
	"F/BLAle0ae0X9YgI9YAF9SU+RgU4h5crkKf6AsZWVmdpTgO6OkGOZJU2f/7w9vPel//WatoKJhag2rTm",
	"ecKeKkYBnaJ1qDbEFYxssGzCwFJ9ZIBpCuGmia9C4vJrgqBt8CsbL2OjpcQnhp9UnkLLHQRY2mztUDAg",
	"BLTE/yNqQiXl5Q+R4usY6VCraevIgFihY8ouArMIomB4aiL99yfRyjPjp8iCJrJh1pQ2/Jw2dI+4mGRt",
	"evDN31jnJeveZ9195u8xf6f35Z3e/++yzj3m32CdvzK/wwf4u6y7X8bwBGNrOCMIAmbQTyEmxdYSk1FB",
	"8TGg8CpoLS3MZ4HwCCoRowhSCr7IXTUbWUXgLeebNU0nEFBoNICQFEJpAArPUmRBFZ4rYB0TRKGhdqT+",
	"bbehY08Gn2AQsilcle89qTNT+LmQbHumyXmoTVPiQVWgcowhJ6hyjADUhLgEeIFG2dnH4coz4lwwImvM",
	"45jHwS4N1r6BMB47jPdfkgJByMub5mmJB1z38vFAeNmgWCBFDo4FC9B1sO2qLI0NmJ07637D/P+w7l9Y",
	"9zW/8F9zELrb0bRiPmUAClQirgvg3mgKffCaAu/dh729PdZ50bv++PDWJvN3Dv/lv/3vJuvc5WB3brDO",
	"M9bZZJ0bkcS8lAWviazC4EQV6qlAWcQ6AuYstm2oq7PFYPnNz6LkgHJpVDS2lhCcr9oFexWsQguqMqlS",
	"0S5MHwYPQvZq0SALGggUDRBMzB+Qh0UUrVKqJiUmFchGOxWGS0GMSS1T64AC0kAWWIUNj5ilgvkysG04",
	"9EMIrxLgNFvlRvPMuuGG2XxRaIgn/sdcS3XPpdhqqJbD3q2bve2bykz25JmwQ9A6oDmpsI30NRtY6jzT",
	"FS7R0BPuWoRSxr0jITDhWIOFxBxxZEt7ZIHYxGtZfuZRey5wmIrio6R4GJiHeVPlF6Pxizj4tdF6iaJC",
	"wnPG8ulYwuUGpWVSdJ5OI9Hl2Dpwa0PdI4i2Frm8oFwEAZGxRLxEEFD+FApoUupobf48slew4KIsCmiu",
	"7Z4FjsM3/ZC4kv8fnZs6NyVSPQfawEHatPbrc1PnPhJbe9oUL62DoFgH66Gd6xvhZVvgFGw2OVqipjdv",
	"aNNhlQ/+DtHmrHhg/rysGgALUgHmpQ0NcU346zh7hAMlCBXBJSOWxFe1Mb7MB8sUWmj+q6kpmTzbNHAW",
	"4Dgm0oWG9Suu9MJI3jvLuYtokiyFno6smz+SVCDBSGG1PhcvXea4u55lAdLiAPkvBC5vWPer+fOs84R1",
	"d5n/LfMfse7rH/e3WHdTALh1+KenP+5vC8ExioVbwMGM+oQPVbPpMw+SVoxOcrYVk04hkxLk+WT+txfO",
	"pDiTZkhQe88nyYIckIRDag5dOoON1glsOeh0IV0GTAxX4dOuqPb+g9bR85tHT/dZd0sUQ14JmHYO/vzd",
	"wZ1vJf10YJoNGitRrUIF8z6GNFHazgSnk9WulKFNlpPiwWxAJtuuqYOkiSxENUVUjMoDYxkWExaZhPX1",
	"uQDkLsen8/KHa/ePnv2DL7c8WH7Fus9k1EyRScHieqIslsfnuf6gitgVsd8tsbu3mf+Mr/zd/bd7uyfj",
	"tthX1TeCA/x2EcP5Pq2Y3IoNStQZkJ9UlqBr5TaV25zYbR4LunzP/30Mn3HzE+lZUc+blU0Oo0mfR9tH",
	"MdJ+h8nIzOMNCmPO7D6Vd97+78HB1q0McesbIuYjo12HtijuOp6CxRdsI6BwibqTFHiisH65os3poE1f",
	"w4g2q7LZpigbiPXjjKMdY+pPwlbnnwKOLeY/Zv4TvpB1Xh788e+H398/s7Qwf0a5poX9G0Vr2kXZxziq",
	"kpBjthoUN4bprSFQjB7mkX5X06QuXf1emjFn7cEXtw+fvlEuW4Kb9Y3A6G05TRPKE8UkT8+L3y+G/bYD",
	"Fq6o42oCF67xalkaCXd621/8cO9Rnzu13OWKE2SmVfJUbaJJ8iFFlpxVL4os9bD1qijGLNn9YWMVZ4os",
	"HbZQjgLozkvW+YP4Z5f5O0dPHpZ2ybkQ/ip45wbv0g22YQe04pOHyXDpzouIaVLJeFUn7fC1nNx2rvLm",
	"shhHkdOFgOjNoGDMJweaEBi5W8RFMVw0CH0aDi7XhPDh9LTI/qmJq60ePHpw+N3XvWv3jh4+UK7CZQ6I",
	"qzO005YZTu7hcMljgGOeCFdMrpj8M54GD0vmIY+Aq+Pfyk/GP0Up6STSN8SnHu4gx5iJ/rBAlYmeFjN3",
	"74jQ2GX+q7d7144ePykwc27XfqHVW1XDfvF3HZPXp19QcojYZBXubhahuaJVVn1/jczXn/e2NgvMJz//",
	"ym2WWBK3l4I/wzKS41HVh46lPmws/pBRcZfQZn9yx/j4MHO34IO+iTlznZRgloxdsnM/S/5wMxBLffIP",
	"R8SYwBV+ni3B6a+lpoBm/tecibFsZFCNeqYCdSCoCjhVHF6JfzVblMvNxfoqxwPz9xYLI6gmcM8QVlRe",
	"iaLKgG1DmmhBWTAvXi5AC6+LzGGOYKuiXCnKqb7yn6ylOMU6rqq/Xba7JfJIWX+omPThFTriZeAhI9ag",
	"5hcxaKxykSpIvZsgFaSxEdcGtlpU3Km4k17gQta02+2fAgAA///j6b/x/VgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
